// src/infrastructure/database/repositories/SupabaseInspectionRepository.ts
import { supabase } from '../supabase';
import { IInspectionRepository } from '@/core/repositories/IInspectionRepository';
import { Inspection } from '@/core/types/interfaces';
import { InspectionEntity } from '@/core/entities/Inspection';

export class SupabaseInspectionRepository implements IInspectionRepository {
  async create(inspection: Inspection): Promise<InspectionEntity> {
    console.log('üíæ Saving inspection to Supabase...');

    try {
      // Get default template if not specified
      let templateId = inspection.templateId;
      if (!templateId) {
        const { data: defaultTemplate } = await supabase
          .from('inspection_templates')
          .select('id')
          .eq('is_default', true)
          .single();

        templateId = defaultTemplate?.id;
      }

      const now = new Date();
      const { data, error } = await supabase
        .from('inspection_records')
        .insert({
          id: inspection.id,
          template_id: templateId,
          user_id: inspection.userId,
          location_id: inspection.locationId,
          inspection_date: now.toISOString().split('T')[0],
          inspection_time: now.toTimeString().split(' ')[0],
          overall_status: inspection.status,
          responses: inspection.assessments, // Map old assessments to responses
          photo_urls: inspection.photoUrl ? [inspection.photoUrl] : [],
          notes: inspection.overallComment || null,
          duration_seconds: null,
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå CREATE INSPECTION ERROR:', error);
        throw new Error(`Failed to create inspection: ${error.message}`);
      }

      console.log('‚úÖ Inspection saved successfully!');
      return this.mapToEntity(data);
    } catch (error: any) {
      console.error('‚ùå CREATE INSPECTION ERROR:', error);
      throw error;
    }
  }

  async findById(id: string): Promise<InspectionEntity | null> {
    try {
      const { data, error } = await supabase
        .from('inspection_records')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        if (error.code === 'PGRST116') return null;
        throw new Error(`Failed to find inspection: ${error.message}`);
      }

      return this.mapToEntity(data);
    } catch (error: any) {
      console.error('‚ùå FIND BY ID ERROR:', error);
      throw error;
    }
  }

  async findMany(filters: {
    userId?: string;
    locationId?: string;
    startDate?: Date;
    endDate?: Date;
    limit?: number;
    offset?: number;
  }): Promise<InspectionEntity[]> {
    try {
      let query = supabase
        .from('inspection_records')
        .select('*')
        .order('submitted_at', { ascending: false });

      if (filters.userId) query = query.eq('user_id', filters.userId);
      if (filters.locationId) query = query.eq('location_id', filters.locationId);
      if (filters.startDate)
        query = query.gte('inspection_date', filters.startDate.toISOString().split('T')[0]);
      if (filters.endDate)
        query = query.lte('inspection_date', filters.endDate.toISOString().split('T')[0]);
      if (filters.limit) query = query.limit(filters.limit);
      if (filters.offset)
        query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1);

      const { data, error } = await query;

      if (error) {
        throw new Error(`Failed to find inspections: ${error.message}`);
      }

      return data.map(this.mapToEntity);
    } catch (error: any) {
      console.error('‚ùå FIND MANY ERROR:', error);
      throw error;
    }
  }

  private mapToEntity(data: any): InspectionEntity {
    return new InspectionEntity(
      data.id,
      data.user_id,
      data.location_id,
      data.overall_status,
      data.responses, // responses instead of assessments
      new Date(data.submitted_at),
      data.notes, // notes instead of overall_comment
      data.photo_urls[0] || null, // take first photo for backward compatibility
      null, // photo_metadata not in new schema
      null, // latitude
      null // longitude
    );
  }
}
