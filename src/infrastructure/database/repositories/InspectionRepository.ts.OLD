// src/infrastructure/repositories/InspectionRepository.ts
import { supabase } from '../database/supabase';
import { Inspection } from '@/core/entities/Inspection';

export class InspectionRepository {
  async create(inspection: Omit<Inspection, 'id' | 'submittedAt'>): Promise<Inspection> {
    const { data, error } = await supabase
      .from('inspection_records')
      .insert({
        template_id: inspection.templateId,
        location_id: inspection.locationId,
        user_id: inspection.userId,
        inspection_date: inspection.inspectionDate.toISOString().split('T')[0],
        inspection_time: inspection.inspectionTime,
        overall_status: inspection.overallStatus,
        responses: inspection.responses,
        photo_urls: inspection.photoUrls,
        notes: inspection.notes || null,
        duration_seconds: inspection.durationSeconds || null,
      })
      .select()
      .single();

    if (error) throw error;
    return this.mapToEntity(data);
  }

  async getByLocation(locationId: string, limit: number = 50): Promise<Inspection[]> {
    const { data, error } = await supabase
      .from('inspection_records')
      .select('*')
      .eq('location_id', locationId)
      .order('submitted_at', { ascending: false })
      .limit(limit);

    if (error) throw error;
    return data.map(this.mapToEntity);
  }

  async getByUser(userId: string, limit: number = 50): Promise<Inspection[]> {
    const { data, error } = await supabase
      .from('inspection_records')
      .select('*')
      .eq('user_id', userId)
      .order('submitted_at', { ascending: false })
      .limit(limit);

    if (error) throw error;
    return data.map(this.mapToEntity);
  }

  async getById(id: string): Promise<Inspection | null> {
    const { data, error } = await supabase
      .from('inspection_records')
      .select('*')
      .eq('id', id)
      .single();

    if (error) return null;
    return this.mapToEntity(data);
  }

  private mapToEntity(data: any): Inspection {
    return {
      id: data.id,
      templateId: data.template_id,
      locationId: data.location_id,
      userId: data.user_id,
      inspectionDate: new Date(data.inspection_date),
      inspectionTime: data.inspection_time,
      overallStatus: data.overall_status,
      responses: data.responses,
      photoUrls: data.photo_urls || [],
      notes: data.notes,
      durationSeconds: data.duration_seconds,
      submittedAt: new Date(data.submitted_at),
      verifiedBy: data.verified_by,
      verifiedAt: data.verified_at ? new Date(data.verified_at) : undefined,
      verificationNotes: data.verification_notes,
    };
  }
}
